//Loop Detect Code : 
bool detectLoop(Node* head)
    {
        if(head==NULL)
        {
            return false;
        }
        Node *temp=head;
        map<Node*,bool>visited;
        while(temp!=NULL)
        {
            if(visited[temp]==true)
            {
                cout<<"Yes there is a loop at position "<<temp->data<<endl;
                return true;
            }
            visited[temp]=true;
            temp=temp->next;
        }
        return false;
    }
Inside Main: 
detectLoop(head);
//////Floyd Loop Detect//////
Node* floydloopdetect(Node*head)
{
    if(head==NULL)
    {
        return NULL;
    }
    Node*slow=head;
    Node*fast=head;
    while(slow!=NULL && fast!=NULL)
    {
        slow=slow->next;       //slow 1 step chlega
        fast=fast->next;
        if(fast!=NULL)
        {
            fast=fast->next;    //fast 2 steps chlega
        }
        if(slow==fast)
        {
            return slow;
        }
    }
    return NULL;
}
Inside Main:

    Node*ans=floydloopdetect(head);
    cout<<"Loop detected at : "<<ans->data;
//////Starting Node////////
Node*startingNode(Node*head)
{
    Node*intersection=floydloopdetect(head);
    Node*slow=head;
    while(slow!=intersection)
    {
        slow=slow->next;
        intersection=intersection->next;
    }
    return slow;
}
Inside Main:
    Node*start=startingNode(head);
    cout<<"Loop starts at : "<<start->data<<endl;
//////Remove Loops//////
void removeloop(Node*head)
{
    Node*ptr=startingNode(head);
    Node*temp=ptr;
    while(temp->next!=ptr)
    {
        temp=temp->next;
    }
    temp->next=NULL;
    cout<<"Loops removed "<<endl;
}
Inside main :
    removeloop(head);
    print(head);

Entire code : 
#include <iostream>
#include <map>
using namespace std;

class Node{
    public:
    int data;
    Node* next;
    //way 1 with constructors
    Node(int data)
    {
        this->data=data;
        this->next=NULL;
    }
};
  void print(Node* &head)
    {
        Node*temp=head;
        while(temp!=NULL)
        {
            cout<<temp->data<<" ";
            temp=temp->next;
        }
        cout<<endl;
    }
    void Insertathead(Node*& head, int d)
    {
        Node*temp=new Node(d);
        temp->next=head;
        head=temp;
        
    }
    void Insertattail(Node*& tail, int d)
    {
        Node*temp=new Node(d);
        tail->next=temp;
        tail=temp;
        
    }
    void Insertatmid(Node*& head,Node*&tail,int position, int d)
    {
        if(position==0)
        {
            Insertathead(head,d);
            return;
        }
        Node*temp=head;
        int cnt=0;
        while(cnt<position-1)
        {
            temp=temp->next;
            cnt++;
        }
        Node*nodetoinsert=new Node(d);
        nodetoinsert->next=temp->next;
        temp->next=nodetoinsert;
        if(nodetoinsert->next==NULL)
        {
            Insertattail(tail,d);
            return;
        }
    }
    ////////METHOD1///////////
/*bool detectLoop(Node* head)
    {
        if(head==NULL)
        {
            return false;
        }
        Node *temp=head;
        map<Node*,bool>visited;
        while(temp!=NULL)
        {
            if(visited[temp]==true)
            {
                cout<<"Yes there is a loop at position "<<temp->data<<endl;
                return true;
            }
            visited[temp]=true;
            temp=temp->next;
        }
        return false;
    }
    /////////////////////////////
    */
Node* floydloopdetect(Node*head)
{
    if(head==NULL)
    {
        return NULL;
    }
    Node*slow=head;
    Node*fast=head;
    while(slow!=NULL && fast!=NULL)
    {
        slow=slow->next;       //slow 1 step chlega
        fast=fast->next;
        if(fast!=NULL)
        {
            fast=fast->next;    //fast 2 steps chlega
        }
        if(slow==fast)
        {
            return slow;
        }
    }
    return NULL;
}
////////Loop start//////////
Node*startingNode(Node*head)
{
    Node*intersection=floydloopdetect(head);
    Node*slow=head;
    while(slow!=intersection)
    {
        slow=slow->next;
        intersection=intersection->next;
    }
    return slow;
}
/////////Remove loop//////////
void removeloop(Node*head)
{
    Node*ptr=startingNode(head);
    Node*temp=ptr;
    while(temp->next!=ptr)
    {
        temp=temp->next;
    }
    temp->next=NULL;
    cout<<"Loops removed "<<endl;
}
////////////////////////////////////
int main()
{
    Node *temp=new Node(12);
    //way 2 without constructors
    Node *node1=new Node(10);
    Node*head=node1;
    Insertathead(head,12);
    Insertathead(head,57);
    Insertathead(head,1);
    Node*tail=node1;
    Insertattail(tail,33);
    Insertatmid(head,tail,3,44);
    Insertatmid(head,tail,6,99);
    print(head);
    tail->next=head->next->next;
    //print(head);
    //detectLoop(head);
    Node*ans=floydloopdetect(head);
    cout<<"Loop detected at : "<<ans->data<<endl;
    Node*start=startingNode(head);
    cout<<"Loop starts at : "<<start->data<<endl;
    removeloop(head);
    print(head);
    return 0;
    
}