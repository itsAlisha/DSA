Just head pointing tail in DLL:
#include <iostream>
using namespace std;

class Node{
    public:
    int data;
    Node* next;
    Node*prev;
    
    Node(int data)
    {
        this->data=data;
        this->next=NULL;
        this->prev=NULL;
    }
    
};
void print(Node *head)
{
    Node*temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}
int main()
{
    Node *node1=new Node(5);
    Node*head=node1;
    Node*tail=new Node(10);
    head->next=tail;
    tail->prev=head;
    print(head);
    
    return 0;
}
INSERTION AT HEAD, TAIL AND MID :
#include <iostream>
using namespace std;

class Node{
    public:
    int data;
    Node* next;
    Node*prev;
    
    Node(int data)
    {
        this->data=data;
        this->next=NULL;
        this->prev=NULL;
    }
    
};
void print(Node *head,Node *tail)
{
    Node*temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
    cout<<"head : "<<head->data<<endl;
    cout<<"tail : "<<tail->data<<endl;
}
void insertathead(Node* &head, int d)
{
    Node*temp=new Node(d);
    if(head==NULL){
        head=temp;
    }
    temp->next=head;
    head->prev=temp;
    head=temp;
}
void insertattail(Node * &tail, int d)
{
    Node*temp=new Node(d);
    if(tail==NULL){
        tail=temp;
    }
    tail->next=temp;
    temp->prev=tail;
    tail=temp;
}
void insertatpos(Node * &head, Node * &tail, int position, int d)
{
    if(position==1)
    {
        insertathead(head,d);
        return;
    }
    int cnt=1;
    Node*temp=head;
    while(cnt<position-1)
    {
        temp=temp->next;
        cnt++;
    }
    if(temp->next==NULL)
    {
        insertattail(tail,d);
        return;
    }
    Node *nodetoinsert=new Node(d);
    temp->next->prev=nodetoinsert;  
    nodetoinsert->next=temp->next;  
    nodetoinsert->prev=temp; 
    temp->next=nodetoinsert; 
    
}
int main()
{
    Node *node1=new Node(5);
    Node*head=node1;
    Node*tail=node1;
    insertathead(head,2);
    insertathead(head,4);
    cout<<"Insertion at head : "<<endl;
    print(head,tail);
    insertattail(tail,7);
    insertattail(tail,8);
    cout<<"Insertion at tail : "<<endl;
    print(head,tail);
     cout<<"Insertion at Pos : "<<endl;
    insertatpos(head,tail,1,55);
    insertatpos(head,tail,4,25);
    print(head,tail);
    cout<<"Insert at tail in pos : "<<endl;
    insertatpos(head,tail,8,35);
    print(head,tail);
     insertatpos(head,tail,9,23);
    print(head,tail);
    return 0;
}
DELETIONS :
#include <iostream>
using namespace std;

class Node{
    public:
    int data;
    Node* next;
    Node*prev;
    
    Node(int data)
    {
        this->data=data;
        this->next=NULL;
        this->prev=NULL;
    }
    ~Node()
    {
        int value=this->data;
        if(this->next!=NULL)
        {
            delete next;
            this->next=NULL;
        }
    }
};
void print(Node *head,Node *tail)
{
    Node*temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
    cout<<"head : "<<head->data<<endl;
    cout<<"tail : "<<tail->data<<endl;
}
void insertathead(Node* &head, int d)
{
    Node*temp=new Node(d);
    if(head==NULL){
        head=temp;
    }
    temp->next=head;
    head->prev=temp;
    head=temp;
}
void insertattail(Node * &tail, int d)
{
    Node*temp=new Node(d);
    if(tail==NULL){
        tail=temp;
    }
    tail->next=temp;
    temp->prev=tail;
    tail=temp;
}
void insertatpos(Node * &head, Node * &tail, int position, int d)
{
    if(position==1)
    {
        insertathead(head,d);
        return;
    }
    int cnt=1;
    Node*temp=head;
    while(cnt<position-1)
    {
        temp=temp->next;
        cnt++;
    }
    if(temp->next==NULL)
    {
        insertattail(tail,d);
        return;
    }
    Node *nodetoinsert=new Node(d);
    temp->next->prev=nodetoinsert;  
    nodetoinsert->next=temp->next;  
    nodetoinsert->prev=temp; 
    temp->next=nodetoinsert; 
}
void deletehead(Node* &head)
{
    Node *temp=head;
    head=head->next; 
    head->prev=NULL;
    temp->next=NULL;
    delete temp;
    cout<<"Head deleted succesfully"<<endl;
}
void deleteatpos(Node* &head,Node* &tail,int pos)
{
    if(pos==1)
    {
        deletehead(head);
    }
    else{
    Node *temp=head;
    Node*previous=NULL;
    int cnt=1;
    while(cnt<pos)
    {
        previous=temp;
        temp=temp->next;
        cnt++;
    }
    temp->prev=NULL;
    previous->next=temp->next;
    temp->next=NULL;
    delete temp;
    if(previous->next==NULL)
    {
        tail=previous;
        return;
    }
    }
}
int main()
{
    Node *node1=new Node(5);
    Node*head=node1;
    Node*tail=node1;
    insertathead(head,2);
    insertathead(head,4);
    cout<<"Insertion at head : "<<endl;
    print(head,tail);
    insertattail(tail,7);
    insertattail(tail,8);
    cout<<"Insertion at tail : "<<endl;
    print(head,tail);
     cout<<"Insertion at Pos : "<<endl;
    insertatpos(head,tail,1,55);
    insertatpos(head,tail,4,25);
    print(head,tail);
    cout<<"Insert at tail in pos : "<<endl;
    insertatpos(head,tail,8,35);
    print(head,tail);
    insertatpos(head,tail,9,23);
    print(head,tail);
        deletehead(head);
        print(head,tail);
        deletehead(head);
        print(head,tail);
        cout<<"Deleting at a pos : "<<endl;
        deleteatpos(head,tail,2);
        print(head,tail);
        cout<<"Deleting at a pos : "<<endl;
        deleteatpos(head,tail,1);
        print(head,tail);
        cout<<"Deleting at a pos : "<<endl;
        deleteatpos(head,tail,5);
        print(head,tail);
    return 0;
}
